// Generated by Haxe 3.4.2
(function () { "use strict";
var CanvasManager = function() { };
CanvasManager.init = function() {
	CanvasManager._canvas = window.document.createElement("canvas");
	CanvasManager._jCanvas = $(CanvasManager._canvas);
	CanvasManager._context = CanvasManager._canvas.getContext("2d",null);
	FileController.init();
	Main.addBody(CanvasManager._jCanvas);
	canvas_ProcessingController.init();
	CanvasManager.drawImage();
};
CanvasManager.onResize = function(winW,winH) {
	CanvasManager.setPosition(winW,winH);
};
CanvasManager.getCanvas = function() {
	return CanvasManager._canvas;
};
CanvasManager.redraw = function() {
	CanvasManager._jCanvas.trigger("redraw");
};
CanvasManager.drawImage = function(src) {
	if(src == null) {
		src = "files/img/image.jpg";
	}
	var image = new Image();
	image.onload = function(event) {
		CanvasManager._jCanvas.off("redraw").on("redraw",null,function(event1) {
			CanvasManager.clear();
			var imageW = image.width;
			var imageH = image.height;
			CanvasManager._canvas.width = imageW;
			CanvasManager._canvas.height = imageH;
			CanvasManager._context.drawImage(image,0,0,imageW,imageH,0,0,imageW,imageH);
			Main.trigger("resize");
		}).trigger("redraw");
	};
	image.src = src;
};
CanvasManager.clear = function() {
	CanvasManager._context.clearRect(0,0,CanvasManager._canvas.width,CanvasManager._canvas.height);
};
CanvasManager.setPosition = function(winW,winH) {
	CanvasManager._jCanvas.css({ top : winH * .5 - CanvasManager._jCanvas.height() * .5, left : winW * .5 - CanvasManager._jCanvas.width() * .5});
};
var FileController = function() { };
FileController.init = function() {
	FileController._jParent = $(FileController.getHtml());
	Main.addBody(FileController._jParent);
	FileController._jParent.on("click",".download",FileController.onDownload);
	FileController._jParent.on("click",".upload",FileController.onUpload);
};
FileController.getHtml = function() {
	var html = "<ul id=\"file-controller\">";
	html += "<li class=\"download\">Download</li>";
	html += "<li class=\"upload\">Upload</li>";
	return html + "</ul>";
};
FileController.onDownload = function(event) {
	var dataurl = CanvasManager.getCanvas().toDataURL();
	var anchor = window.document.createElement("a");
	anchor.href = dataurl;
	anchor.download = "image.png";
	anchor.click();
};
FileController.onUpload = function(event) {
	var input = window.document.createElement("input");
	input.type = "file";
	input.onchange = function(event1) {
		var files = input.files;
		CanvasManager.drawImage(URL.createObjectURL(files[0]));
	};
	input.click();
};
var HxOverrides = function() { };
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Main = function() { };
Main.main = function() {
	$("document").ready(Main.init);
};
Main.init = function(event) {
	Main._jWindow = $(window);
	Main._jAll = $("#all");
	CanvasManager.init();
	Main._jWindow.on({ "resize" : Main.onResize}).trigger("resize");
};
Main.trigger = function(name) {
	Main._jWindow.trigger(name);
};
Main.onResize = function(event) {
	var winW = Main._jWindow.innerWidth();
	var winH = Main._jWindow.innerHeight();
	CanvasManager.onResize(winW,winH);
};
Main.addBody = function(jTarget) {
	Main._jAll.append(jTarget);
};
var jp_okawa_js_canvas_ImageProcessing = function() { };
jp_okawa_js_canvas_ImageProcessing.setQualify = function(canvas,scale) {
	canvas.width = Math.floor(canvas.width * scale);
	canvas.height = Math.floor(canvas.height * scale);
	canvas.getContext("2d",null).scale(scale,scale);
};
jp_okawa_js_canvas_ImageProcessing.cloneImageData = function(imageData) {
	var canvas = window.document.createElement("canvas");
	canvas.width = imageData.width;
	canvas.height = imageData.height;
	var context = canvas.getContext("2d");
	context.putImageData(imageData,0,0);
	return context.getImageData(0,0,imageData.width,imageData.height);
};
jp_okawa_js_canvas_ImageProcessing.imageDataCounter = function(canvas,process) {
	var context = canvas.getContext("2d",null);
	var imageData = context.getImageData(0,0,canvas.width,canvas.height);
	var units = imageData.data;
	var index = 0;
	var length = Math.floor(units.length * .25);
	var _g1 = 0;
	var _g = length;
	while(_g1 < _g) {
		var i = _g1++;
		process(units,index);
		index += 4;
	}
	context.putImageData(imageData,0,0);
};
jp_okawa_js_canvas_ImageProcessing.drawDot = function(canvas,size) {
	if(size == null) {
		size = 5;
	}
	var width = canvas.width;
	var height = canvas.height;
	var context = canvas.getContext("2d",null);
	var imageData = context.getImageData(0,0,width,height);
	var units = imageData.data;
	var _g1 = 0;
	var _g = height;
	while(_g1 < _g) {
		var y = _g1++;
		var counter = 0;
		var flag = 1;
		var _g3 = 0;
		var _g2 = width;
		while(_g3 < _g2) {
			var x = _g3++;
			var target = (y * width + x) * 4;
			if(counter <= 0) {
				units[target + 3] = 0;
			}
			counter += flag;
			if(Math.abs(counter) == size) {
				counter = 0;
			}
		}
	}
	context.putImageData(imageData,0,0);
};
jp_okawa_js_canvas_ImageProcessing.drawGrayScale = function(canvas) {
	jp_okawa_js_canvas_ImageProcessing.imageDataCounter(canvas,function(units,index) {
		var r = units[index];
		var g = units[index + 1];
		var b = units[index + 2];
		units[index] = units[index + 1] = units[index + 2] = Math.round((r + g + b) / 3);
	});
};
jp_okawa_js_canvas_ImageProcessing.drawMonochrome = function(canvas) {
	jp_okawa_js_canvas_ImageProcessing.imageDataCounter(canvas,function(units,index) {
		var unity = units[index] * .2126 + units[index + 1] * .7152 + units[index + 2] * .0722;
		units[index] = units[index + 1] = units[index + 2] = Math.floor(unity);
	});
};
jp_okawa_js_canvas_ImageProcessing.drawThreshold = function(canvas,isDetail) {
	if(isDetail == null) {
		isDetail = false;
	}
	var total = 0;
	jp_okawa_js_canvas_ImageProcessing.imageDataCounter(canvas,function(units,index) {
		var v = units[index] * .298912 + units[index + 1] * .586611 + units[index + 2] * .114478;
		if(isDetail) {
			if(canvas.height / index == 0) {
				total = 0;
			}
			total += v;
			if(total > 255) {
				total -= 255;
				units[index] = units[index + 1] = units[index + 2] = 255;
			} else {
				units[index] = units[index + 1] = units[index + 2] = 0;
			}
		} else if(v > 136) {
			units[index] = units[index + 1] = units[index + 2] = 255;
		} else {
			units[index] = units[index + 1] = units[index + 2] = 0;
		}
	});
};
jp_okawa_js_canvas_ImageProcessing.drawNegativeReverse = function(canvas) {
	jp_okawa_js_canvas_ImageProcessing.imageDataCounter(canvas,function(units,index) {
		units[index] = 255 - units[index];
		units[index + 1] = 255 - units[index + 1];
		units[index + 2] = 255 - units[index + 2];
	});
};
jp_okawa_js_canvas_ImageProcessing.drawMosaic = function(canvas,size) {
	if(size == null) {
		size = 10;
	}
	var width = canvas.width;
	var height = canvas.height;
	var context = canvas.getContext("2d",null);
	var units = context.getImageData(0,0,width,height).data;
	var y = 0;
	var _g1 = 0;
	var _g = height;
	while(_g1 < _g) {
		var i = _g1++;
		if(height < y) {
			break;
		}
		var x = 0;
		var _g3 = 0;
		var _g2 = width;
		while(_g3 < _g2) {
			var l = _g3++;
			if(width < x) {
				break;
			}
			var target = (y * width + x) * 4;
			var r = units[target];
			var g = units[target + 1];
			var b = units[target + 2];
			context.fillStyle = "rgb(" + r + "," + g + "," + b + ")";
			context.fillRect(x,y,x + size,y + size);
			x += size;
		}
		y += size;
	}
};
jp_okawa_js_canvas_ImageProcessing.drawQuantize = function(canvas) {
	jp_okawa_js_canvas_ImageProcessing.imageDataCounter(canvas,function(units,index) {
		var r = units[index] & 255;
		var g = units[index + 1] & 255;
		var b = units[index + 2] & 255;
		var gray = Math.floor((r + g + b) / 3);
		var quant = gray & 192;
		units[index] = quant;
		units[index + 1] = quant;
		units[index + 2] = quant;
	});
};
jp_okawa_js_canvas_ImageProcessing.drawDetectEdge = function(canvas) {
	var context = canvas.getContext("2d",null);
	var width = canvas.width;
	var height = canvas.height;
	var data = context.getImageData(0,0,width,height).data;
	var length = Math.floor(data.length * .25);
	var dataQuant = [];
	var index = 0;
	var _g1 = 0;
	var _g = length;
	while(_g1 < _g) {
		var i = _g1++;
		var r = data[index] & 255;
		var g = data[index + 1] & 255;
		var b = data[index + 2] & 255;
		var gray = Math.floor((r + g + b) / 3);
		index += 4;
		dataQuant.push(gray & 192);
	}
	var edgeData = context.createImageData(width,height);
	var _g11 = 0;
	var _g2 = height - 1;
	while(_g11 < _g2) {
		var y = _g11++;
		var _g3 = 0;
		var _g21 = width - 1;
		while(_g3 < _g21) {
			var x = _g3++;
			var i1 = y * width + x;
			var around = (dataQuant[i1 - width] + dataQuant[i1 - 1] + dataQuant[i1 + 1] + dataQuant[i1 + width]) / 4;
			var c = around < dataQuant[i1] ? 0 : 255;
			edgeData.data[i1 * 4] = c;
			edgeData.data[i1 * 4 + 1] = c;
			edgeData.data[i1 * 4 + 2] = c;
			edgeData.data[i1 * 4 + 3] = 255;
		}
	}
	context.putImageData(edgeData,0,0);
};
jp_okawa_js_canvas_ImageProcessing.drawSobel = function(canvas) {
	var context = canvas.getContext("2d",null);
	var width = canvas.width;
	var height = canvas.height;
	var imageData = context.getImageData(0,0,width,height);
	var units = imageData.data;
	var cUnits = jp_okawa_js_canvas_ImageProcessing.cloneImageData(imageData).data;
	var kernelX = [-1,0,1,-2,0,2,-1,0,1];
	var getValue = function(i,j) {
		var value = [0,0,0];
		var k = -1;
		while(k <= 1) {
			var l = -1;
			while(l <= 1) {
				var x = j + l;
				var y = i + k;
				if(x < 0 || width <= x || y < 0 || height <= y) {
					++l;
					continue;
				}
				var index1 = (x + y * width) * 4;
				var index2 = l + 1 + (k + 1) * 3;
				value[0] += kernelX[index2] * cUnits[index1];
				value[1] += kernelX[index2] * cUnits[index1 + 1];
				value[2] += kernelX[index2] * cUnits[index1 + 2];
				++l;
			}
			++k;
		}
		return value;
	};
	var _g1 = 0;
	var _g = height;
	while(_g1 < _g) {
		var i1 = _g1++;
		var _g3 = 0;
		var _g2 = width;
		while(_g3 < _g2) {
			var j1 = _g3++;
			var index = (j1 + i1 * width) * 4;
			var value1 = getValue(i1,j1);
			units[index] = value1[0];
			units[index + 1] = value1[1];
			units[index + 2] = value1[2];
			units[index + 3] = cUnits[index + 3];
		}
	}
	context.putImageData(imageData,0,0);
};
var canvas_ProcessingController = function() { };
canvas_ProcessingController.init = function() {
	canvas_ProcessingController._jParent = $(canvas_ProcessingController.getHtml());
	Main.addBody(canvas_ProcessingController._jParent);
	canvas_ProcessingController._jParent.on("click","li",canvas_ProcessingController.onClick);
};
canvas_ProcessingController.getHtml = function() {
	var html = "<ul id=\"processing-controller\">";
	var key = canvas_ProcessingController.PROCESSING_LIST.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		html += "<li data-processing=\"" + key1 + "\">" + key1 + "</li>";
	}
	return html + "</ul>";
};
canvas_ProcessingController.onClick = function(event) {
	CanvasManager.redraw();
	var processing = $(event.currentTarget).data("processing");
	var _this = canvas_ProcessingController.PROCESSING_LIST;
	(__map_reserved[processing] != null ? _this.getReserved(processing) : _this.h[processing])(CanvasManager.getCanvas());
};
var haxe_IMap = function() { };
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
};
var __map_reserved = {}
CanvasManager.IMAGE_PATH = "files/img/image.jpg";
canvas_ProcessingController.PROCESSING_LIST = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["Default"] != null) {
		_g.setReserved("Default",function(canvas11) {
		});
	} else {
		_g.h["Default"] = function(canvas11) {
		};
	}
	{
		var value = jp_okawa_js_canvas_ImageProcessing.drawDot;
		if(__map_reserved["Dot"] != null) {
			_g.setReserved("Dot",value);
		} else {
			_g.h["Dot"] = value;
		}
	}
	{
		var value1 = jp_okawa_js_canvas_ImageProcessing.drawGrayScale;
		if(__map_reserved["GrayScale"] != null) {
			_g.setReserved("GrayScale",value1);
		} else {
			_g.h["GrayScale"] = value1;
		}
	}
	{
		var value2 = jp_okawa_js_canvas_ImageProcessing.drawMonochrome;
		if(__map_reserved["Monochrome"] != null) {
			_g.setReserved("Monochrome",value2);
		} else {
			_g.h["Monochrome"] = value2;
		}
	}
	{
		var value3 = jp_okawa_js_canvas_ImageProcessing.drawMosaic;
		if(__map_reserved["Mosaic"] != null) {
			_g.setReserved("Mosaic",value3);
		} else {
			_g.h["Mosaic"] = value3;
		}
	}
	{
		var value4 = jp_okawa_js_canvas_ImageProcessing.drawQuantize;
		if(__map_reserved["Quantize"] != null) {
			_g.setReserved("Quantize",value4);
		} else {
			_g.h["Quantize"] = value4;
		}
	}
	{
		var value5 = jp_okawa_js_canvas_ImageProcessing.drawThreshold;
		if(__map_reserved["Threshold"] != null) {
			_g.setReserved("Threshold",value5);
		} else {
			_g.h["Threshold"] = value5;
		}
	}
	{
		var value6 = jp_okawa_js_canvas_ImageProcessing.drawDetectEdge;
		if(__map_reserved["Detect Edge"] != null) {
			_g.setReserved("Detect Edge",value6);
		} else {
			_g.h["Detect Edge"] = value6;
		}
	}
	{
		var value7 = jp_okawa_js_canvas_ImageProcessing.drawNegativeReverse;
		if(__map_reserved["Negative Reverse"] != null) {
			_g.setReserved("Negative Reverse",value7);
		} else {
			_g.h["Negative Reverse"] = value7;
		}
	}
	{
		var value8 = jp_okawa_js_canvas_ImageProcessing.drawSobel;
		if(__map_reserved["Sobel"] != null) {
			_g.setReserved("Sobel",value8);
		} else {
			_g.h["Sobel"] = value8;
		}
	}
	$r = _g;
	return $r;
}(this));
Main.main();
})();
